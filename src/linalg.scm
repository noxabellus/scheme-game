(define-library (linalg)
    (import
        (scheme base)
        (scheme inexact)
        (scheme case-lambda)
        (srfi 133)
        (srfi 160 f32)
        (combinators))

    (export
        V V* make-V V-zero V-one V-axis V-dim V? V-ref V-set! V-x V-y V-z V-w V-set-x! V-set-y! V-set-z! V-set-w! V-length-sq V-length V-normalize V-map V-fold V-every V-dot V-abs V-ceiling V-floor V-round V-truncate V-max V-min V+ V- V* V/ V-col-max V-col-min V-col+ V-col* V-col- V-col/
        V2 V2* make-V2 V2-zero V2-one V2-axis V2? V2-ref V2-set! V2-x V2-y V2-set-x! V2-set-y! V2-length-sq V2-length V2-normalize V2-map V2-fold V2-every V2-dot V2-abs V2-ceiling V2-floor V2-round V2-truncate V2-max V2-min V2+ V2- V2* V2/ V2-col-max V2-col-min V2-col+ V2-col* V2-col- V2-col/
        V3 V3* make-V3 V3-zero V3-one V3-axis V3? V3-ref V3-set! V3-x V3-y V3-z V3-set-x! V3-set-y! V3-set-z! V3-length-sq V3-length V3-normalize V3-map V3-fold V3-every V3-dot V3-abs V3-ceiling V3-floor V3-round V3-truncate V3-max V3-min V3+ V3- V3* V3/ V3-col-max V3-col-min V3-col+ V3-col* V3-col- V3-col/
        V4 V4* make-V4 V4-zero V4-one V4-axis V4? V4-ref V4-set! V4-x V4-y V4-z V4-w V4-set-x! V4-set-y! V4-set-z! V4-set-w! V4-length-sq V4-length V4-normalize V4-dot V4-map V4-fold V4-every V4-abs V4-ceiling V4-floor V4-round V4-truncate V4-max V4-min V4+ V4- V4* V4/ V4-col-max V4-col-min V4-col+ V4-col* V4-col- V4-col/
        M M* make-M M-zero M-one M-identity M? M-ref M-set! M-mul M-fold M-map M-every
        M3 M3* make-M3 M3-zero M3-one M3-identity M3? M3-ref M3-set! M3-mul M3-fold M3-map M3-every M3-translation M3-scale M3-rotation M3-shear
        M4 M4* make-M4 M4-zero M4-one M4-identity M4? M4-ref M4-set! M4-mul M4-fold M4-map M4-every)

    (begin
        (define V f32vector)
        (define (V* lst) (apply V lst))
        (define make-V make-f32vector)
        (define (V-zero dim) (make-V dim 0.0))
        (define (V-one dim)  (make-V dim 1.0))
        (define (V-axis dim axis)
            (let ((v (V-zero dim)))
                (V-set! v axis 1.0)
                v))
        (define V-dim f32vector-length)
        (define (V? dim v)
        (and (f32vector? v)
            (= (V-dim v) dim)))

        (define (V-ref v i) (f32vector-ref v i))
        (define (V-set! v i x) (f32vector-set! v i x))
        (define (V-x v) (V-ref v 0))
        (define (V-y v) (V-ref v 1))
        (define (V-z v) (V-ref v 2))
        (define (V-w v) (V-ref v 3))
        (define (V-set-x! v x) (V-set! v 0 x))
        (define (V-set-y! v y) (V-set! v 1 y))
        (define (V-set-z! v z) (V-set! v 2 z))
        (define (V-set-w! v w) (V-set! v 3 w))
        (define (V-length-sq v) (V-dot v v))
        (define (V-length v) (sqrt (V-length-sq v)))
        (define (V-normalize v) (V/ v (V-length v)))
        (define V-map f32vector-map)
        (define V-fold f32vector-fold)
        (define V-every f32vector-every)
        (define V-dot (<- V-fold (lambda (acc a b) (+ acc (* a b))) 0.0))
        (define V-abs (<- V-map abs))
        (define V-ceiling (<- V-map ceiling))
        (define V-floor (<- V-map floor))
        (define V-round (<- V-map round))
        (define V-truncate (<- V-map truncate))
        (define V-max (<- V-map max))
        (define V-min (<- V-map min))
        (define V+ (<- V-map +))
        (define V- (<- V-map -))
        (define V* (<- V-map *))
        (define V/ (<- V-map /))
        (define V-col-max (<- V-fold max))
        (define V-col-min (<- V-fold min))
        (define V-col+ (<- V-fold +))
        (define V-col* (<- V-fold *))
        (define V-col- (<- V-fold -))
        (define V-col/ (<- V-fold /))





        (define (V2 x y) (V x y))
        (define (V2* lst) (apply V2 lst))
        (define (make-V2 s) (make-V 2 s))
        (define (V2-zero) (V-zero 2))
        (define (V2-one)  (V-one 2))
        (define V2-axis (<- V-axis 2))
        (define (V2? v) (V? 2 v))

        (define (V2-cross a b)
            (- (* (V2-ref a 0) (V2-ref b 1))
               (* (V2-ref b 0) (V2-ref a 1))))

        (define (V2-cross-perp a b) (V2-dot a (V2-perp b)))

        (define (V2-perp a)
            (V2 (- (V2-ref a 1))
                (V2-ref a 0)))
            
        (define V2-ref V-ref)
        (define V2-set! V-set!)
        (define V2-x V-x)
        (define V2-y V-y)
        (define V2-set-x! V-set-x!)
        (define V2-set-y! V-set-y!)
        (define V2-length-sq V-length-sq)
        (define V2-length V-length)
        (define V2-normalize V-normalize)
        (define V2-map V-map)
        (define V2-fold V-fold)
        (define V2-every V-every)
        (define V2-dot V-dot)
        (define V2-abs V-abs)
        (define V2-ceiling V-ceiling)
        (define V2-floor V-floor)
        (define V2-round V-round)
        (define V2-truncate V-truncate)
        (define V2-max V-max)
        (define V2-min V-min)
        (define V2+ V+)
        (define V2- V-)
        (define V2* V*)
        (define V2/ V/)
        (define V2-col-max V-col-max)
        (define V2-col-min V-col-min)
        (define V2-col+ V-col+)
        (define V2-col* V-col*)
        (define V2-col- V-col-)
        (define V2-col/ V-col/)
            



        (define (V3 x y z) (V x y z))
        (define (V3* lst) (apply V3 lst))
        (define (make-V3 s) (make-V 3 s))
        (define (V3-zero) (V-zero 3))
        (define (V3-one)  (V-one 3))
        (define V3-axis (<- V-axis 3))
        (define (V3? v) (V? 3 v))

        (define (V3-cross a b)
            (V3 (- (* (V3-ref a 1) (V3-ref b 2))
                   (* (V3-ref a 2) (V3-ref b 1)))
                (- (* (V3-ref a 2) (V3-ref b 0))
                   (* (V3-ref a 0) (V3-ref b 2)))
                (- (* (V3-ref a 0) (V3-ref b 1))
                   (* (V3-ref a 1) (V3-ref b 0)))))

        (define V3-ref V-ref)
        (define V3-set! V-set!)
        (define V3-x V-x)
        (define V3-y V-y)
        (define V3-z V-z)
        (define V3-set-x! V-set-x!)
        (define V3-set-y! V-set-y!)
        (define V3-set-z! V-set-z!)
        (define V3-length-sq V-length-sq)
        (define V3-length V-length)
        (define V3-normalize V-normalize)
        (define V3-map V-map)
        (define V3-fold V-fold)
        (define V3-every V-every)
        (define V3-dot V-dot)
        (define V3-abs V-abs)
        (define V3-ceiling V-ceiling)
        (define V3-floor V-floor)
        (define V3-round V-round)
        (define V3-truncate V-truncate)
        (define V3-max V-max)
        (define V3-min V-min)
        (define V3+ V+)
        (define V3- V-)
        (define V3* V*)
        (define V3/ V/)
        (define V3-col-max V-col-max)
        (define V3-col-min V-col-min)
        (define V3-col+ V-col+)
        (define V3-col* V-col*)
        (define V3-col- V-col-)
        (define V3-col/ V-col/)
            




        (define (V4 x y z w) (V x y z w))
        (define (V4* lst) (apply V4 lst))
        (define (make-V4 s) (make-V 4 s))
        (define (V4-zero) (V-zero 4))
        (define (V4-one)  (V-one 4))
        (define V4-axis (<- V-axis 4))
        (define (V4? v) (V? 4 v))

        (define V4-ref V-ref)
        (define V4-set! V-set!)
        (define V4-x V-x)
        (define V4-y V-y)
        (define V4-z V-z)
        (define V4-w V-w)
        (define V4-set-x! V-set-x!)
        (define V4-set-y! V-set-y!)
        (define V4-set-z! V-set-z!)
        (define V4-set-w! V-set-w!)
        (define V4-length-sq V-length-sq)
        (define V4-length V-length)
        (define V4-normalize V-normalize)
        (define V4-dot V-dot)
        (define V4-map V-map)
        (define V4-fold V-fold)
        (define V4-every V-every)
        (define V4-abs V-abs)
        (define V4-ceiling V-ceiling)
        (define V4-floor V-floor)
        (define V4-round V-round)
        (define V4-truncate V-truncate)
        (define V4-max V-max)
        (define V4-min V-min)
        (define V4+ V+)
        (define V4- V-)
        (define V4* V*)
        (define V4/ V/)
        (define V4-col-max V-col-max)
        (define V4-col-min V-col-min)
        (define V4-col+ V-col+)
        (define V4-col* V-col*)
        (define V4-col- V-col-)
        (define V4-col/ V-col/)




        (define M vector)
        (define (M* lst) (apply M lst))
        (define make-M make-vector)
        (define (M-zero dim) (make-M dim V-zero))
        (define (M-one dim)  (make-M dim V-one))
        (define (M-identity dim)
        (let ((m (M-zero dim)))
            (do ((i 0 (+ i 1)))
                ((= i dim) m)
            (M-set! m i i 1.0))))
        (define (M? dim m)
        (and (vector? m)
            (= (M-dim m) dim))
            (vector-every V? dim m))
        (define M-dim vector-length)
        (define M-ref
            (case-lambda
                ((m i) (vector-ref m i))
                ((m i j) (V-ref (vector-ref m i) j))))
        (define M-set!
            (case-lambda
                ((m i v) (vector-set! m i v))
                ((m i j v) (V-set! (vector-ref m i) j v))))
        (define (M-mul a b)
            (let ((k (M-dim a))
                  (m (M-zero k)))
                (do ((i 0 (+ i 1)))
                    ((= i k) m)
                    (do ((j 0 (+ j 1)))
                        ((= j k))
                        (M-set! m i j (V-dot (M-ref a j) (M-ref b i)))))))
        (define M-fold vector-fold)
        (define M-map vector-map)
        (define M-every vector-every)
            




        (define (M3 a b c) (M a b c))
        (define (M3* lst) (apply M3 lst))
        (define make-M3 (<- make-M 3))
        (define (M3-zero) (M-zero 3))
        (define (M3-one) (M-one 3))
        (define (M3-identity) (M-identity 3))
        (define M3? (<- M? 3))
        (define M3-ref M-ref)
        (define M3-set! M-set!)
        ; (define M3-mul M-mul)
        (define (M3-mul a b)
            (M3 (V3 (V3-dot (M3-ref a 0) (M3-ref b 0))
                    (V3-dot (M3-ref a 1) (M3-ref b 0))
                    (V3-dot (M3-ref a 2) (M3-ref b 0)))
                (V3 (V3-dot (M3-ref a 0) (M3-ref b 1))
                    (V3-dot (M3-ref a 1) (M3-ref b 1))
                    (V3-dot (M3-ref a 2) (M3-ref b 1)))
                (V3 (V3-dot (M3-ref a 0) (M3-ref b 2))
                    (V3-dot (M3-ref a 1) (M3-ref b 2))
                    (V3-dot (M3-ref a 2) (M3-ref b 2)))))

        (define M3-fold M-fold)
        (define M3-map M-map)
        (define M3-every M-every)

        (define (M3-translation x y)
            (M3 (V3 1.0 0.0 x)
                (V3 0.0 1.0 y)
                (V3 0.0 0.0 1.0)))

        (define (M3-scale x y)
            (M3 (V3 x   0.0 0.0)
                (V3 0.0 y   0.0)
                (V3 0.0 0.0 1.0)))
        
        (define (M3-rotation a)
            (let ((c (cos a))
                    (s (sin a)))
                (M3 (V3 c   (- s) 0.0)
                    (V3 s   c     0.0)
                    (V3 0.0 0.0   1.0))))

        (define (M3-shear x y)
            (M3 (V3 1.0 x   0.0)
                (V3 y   1.0 0.0)
                (V3 0.0 0.0 1.0)))




        (define (M4 a b c d) (M a b c d))
        (define (M4* lst) (apply M4 lst))
        (define make-M4 (<- make-M 4))
        (define (M4-zero) (M-zero 4))
        (define (M4-one) (M-one 4))
        (define (M4-identity) (M-identity 4))
        (define M4? (<- M? 4))
        (define M4-ref M-ref)
        (define M4-set! M-set!)
        (define M4-mul M-mul)
        (define M4-fold M-fold)
        (define M4-map M-map)
        (define M4-every M-every)
    ))